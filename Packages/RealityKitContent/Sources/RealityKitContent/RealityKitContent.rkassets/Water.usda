#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["GridMaterial", "Sphere_1", "Sphere_2", "Sphere_3", "Cylinder", "Cylinder_1", "Red_PU_Leather", "DefaultMaterial_1"]
    def "GridMaterial" (
        active = true
        references = @Materials/GridMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (-1.6391277e-7, 1.4528632e-7, 0.9779624)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Sphere "Sphere_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere_1/DefaultMaterial>
        double radius = 0.4
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.3, 0.3, 0.3)
        float3 xformOp:translate = (-0.004152715, 0.115728095, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Sphere_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 0.4932719, 0.47399843) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Sphere "Sphere_2" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere_2/DefaultMaterial>
        double radius = 0.3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.3, 0.3, 0.3)
        float3 xformOp:translate = (-0.30970472, -0.066591606, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            prepend token outputs:surface.connect = </Root/Sphere_2/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.47684187, 0.5048076, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Sphere "Sphere_3" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </Root/Sphere_3/DefaultMaterial>
        double radius = 0.3
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.3, 0.3, 0.3)
        float3 xformOp:translate = (0.3216039, -0.059051562, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            token outputs:mtlx:surface
            token outputs:realitykit:vertex
            token outputs:surface.connect = </Root/Sphere_3/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (0.47684187, 0.5048076, 1) (
                    colorSpace = "srgb_texture"
                )
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "Cylinder" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (2.0106934e-7, 1.1119528e-7, -0.9827371)
        }
    )
    {
        uniform token axis = "Y"
        double height = 1
        rel material:binding = </Root/Cylinder/DefaultMaterial>
        double radius = 0.1
        quatf xformOp:orient = (0.88168794, 1.14873004e-7, 1.584195e-9, -0.47183296)
        float3 xformOp:scale = (0.3, 0.3, 0.3)
        float3 xformOp:translate = (-0.19321087, 0.0113074295, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def Cylinder "Cylinder_1" (
        active = true
        prepend apiSchemas = ["MaterialBindingAPI"]
        customData = {
            float3 rotationEulerHint = (-1.9937902e-7, 1.0753879e-7, 0.98128694)
        }
    )
    {
        uniform token axis = "Y"
        double height = 1
        rel material:binding = </Root/Cylinder_1/DefaultMaterial>
        double radius = 0.1
        quatf xformOp:orient = (0.88202983, -1.1326492e-7, 4.5315307e-10, 0.47119355)
        float3 xformOp:scale = (0.3, 0.3, 0.3)
        float3 xformOp:translate = (0.17135847, 0.033470824, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Material "DefaultMaterial"
        {
            prepend token outputs:surface.connect = </Root/Cylinder_1/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

            def Shader "DefaultSurfaceShader"
            {
                uniform token info:id = "UsdPreviewSurface"
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:roughness = 0.75
                token outputs:surface
            }
        }
    }

    def "Red_PU_Leather" (
        active = true
        references = @RedPULeather.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Material "DefaultMaterial"
    {
        token outputs:mtlx:surface
        token outputs:realitykit:vertex
        token outputs:surface.connect = </Root/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

        def Shader "DefaultSurfaceShader"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (2.220446e-16, 0.3855017, 1) (
                colorSpace = "srgb_displayp3"
            )
            float inputs:roughness = 0.75
            token outputs:surface
        }
    }
}

